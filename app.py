from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import requests
import json # JSON рдореЙрдбреНрдпреВрд▓ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
from dotenv import load_dotenv

app = Flask(__name__)
load_dotenv() # .env рдлрд╝рд╛рдЗрд▓ рд╕реЗ рдПрдиреНрд╡рд╛рдпрд░рдореЗрдВрдЯ рд╡реЗрд░рд┐рдПрдмрд▓реНрд╕ рд▓реЛрдб рдХрд░реЗрдВ
CORS(app) # CORS рдЗрдиреЗрдмрд▓ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдлреНрд░рдВрдЯрдПрдВрдб рд╕реЗ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдЖ рд╕рдХреЗ

# рдЕрдкрдиреА Groq API рдХреБрдВрдЬреА рдпрд╣рд╛рдВ рд╕реЗрдЯ рдХрд░реЗрдВ
API_KEY = os.getenv("GROQ_API_KEY")

@app.route("/", methods=["GET"])
def home():
    """рдмреЗрд╕рд┐рдХ рд╣реЛрдо рд░реВрдЯ рдпрд╣ рдЬрд╛рдВрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐ API рдЪрд▓ рд░рд╣рд╛ рд╣реИ рдпрд╛ рдирд╣реАрдВред"""
    return "ЁЯза Groq Chatbot API is running!"

@app.route("/chat", methods=["POST"])
def chat():
    """
    рдпреВрдЬрд░ рдХреЗ рдиреЗрдЪреБрд░рд▓ рд▓реИрдВрдЧреНрд╡реЗрдЬ рдХрдорд╛рдВрдб рдХреЛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░рддрд╛ рд╣реИ рдФрд░ Groq API рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ
    рдЙрдиреНрд╣реЗрдВ рдПрдХреНрд╕реЗрд▓ рдПрдХреНрд╢рдиреНрд╕ рдореЗрдВ рдмрджрд▓рддрд╛ рд╣реИред
    """
    data = request.json
    
    # рдлреНрд░рдВрдЯрдПрдВрдб рд╕реЗ 'message' (рдпреВрдЬрд░ рдХрдорд╛рдВрдб) рдФрд░ 'excelData' рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
    user_msg = data.get("message", "") 
    excel_data = data.get("excelData", {}) 

    if not user_msg:
        return jsonify({"error": "No message provided"}), 400

    # AI рдХреЛ рджрд┐рдП рдЬрд╛рдиреЗ рд╡рд╛рд▓реЗ рд╕рд┐рд╕реНрдЯрдо рдкреНрд░реЙрдореНрдкреНрдЯ рдХреЛ рдФрд░ рд╡рд┐рд╕реНрддреГрдд рдХрд░реЗрдВ
    # рдЙрд╕реЗ рдмрддрд╛рдПрдВ рдХрд┐ рд╡рд╣ рдПрдХреНрд╕реЗрд▓ рдСрдкрд░реЗрд╢рди рдХрд░ рд╕рдХрддрд╛ рд╣реИ рдФрд░ JSON рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рдХреИрд╕реЗ рдЬрд╡рд╛рдм рджреЗ
    system_prompt = """
    рдЖрдк рдПрдХ рдмрд╣реБрдд рд╣реА рдмреБрджреНрдзрд┐рдорд╛рди рдФрд░ рдХреБрд╢рд▓ рдПрдХреНрд╕реЗрд▓ рд╕рд╣рд╛рдпрдХ рд╣реИрдВред рдЖрдкрдХрд╛ рдХрд╛рдо рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рд╣рд┐рдВрджреА рдореЗрдВ рджрд┐рдП рдЧрдП рдХрдорд╛рдВрдбреНрд╕ рдХреЛ рд╕рдордЭрдирд╛ рдФрд░ рдЙрдиреНрд╣реЗрдВ JSON рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рдПрдХреНрд╕реЗрд▓ рдПрдХреНрд╢рдиреНрд╕ рдореЗрдВ рдмрджрд▓рдирд╛ рд╣реИред
    рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдиреЗ рдЖрдкрдХреЛ рд╡рд░реНрддрдорд╛рди рдПрдХреНрд╕реЗрд▓ рдЧреНрд░рд┐рдб рдХрд╛ рдбреЗрдЯрд╛ рднреА рдкреНрд░рджрд╛рди рдХрд┐рдпрд╛ рд╣реИ, рдЬрд┐рд╕рдХрд╛ рдЙрдкрдпреЛрдЧ рдЖрдк рдЧрдгрдирд╛ рдпрд╛ рд╕рдВрджрд░реНрдн рдХреЗ рд▓рд┐рдП рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

    рдЖрдкрдХреЗ рдЬрд╡рд╛рдм рдореЗрдВ рдПрдХ 'actions' рдирд╛рдо рдХреА JSON рд▓рд┐рд╕реНрдЯ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред рд╣рд░ рдПрдХреНрд╢рди рдСрдмреНрдЬреЗрдХреНрдЯ рдореЗрдВ 'action' рдХрд╛ рдкреНрд░рдХрд╛рд░ (рдЬреИрд╕реЗ 'sum', 'average', 'write', 'highlight', 'sort', 'filter') рдФрд░ рдЙрд╕ рдПрдХреНрд╢рди рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХ рдкреИрд░рд╛рдореАрдЯрд░реНрд╕ рд╣реЛрдиреЗ рдЪрд╛рд╣рд┐рдПред

    рд╕рдорд░реНрдерд┐рдд рдПрдХреНрд╢рди рдкреНрд░рдХрд╛рд░ рдФрд░ рдЙрдирдХреЗ рдЕрдкреЗрдХреНрд╖рд┐рдд рдкреИрд░рд╛рдореАрдЯрд░реНрд╕:
    1.  **sum**: рд░реЗрдВрдЬ рдореЗрдВ рд╕рдВрдЦреНрдпрд╛рдУрдВ рдХрд╛ рдпреЛрдЧ рдХрд░рддрд╛ рд╣реИред
        -   `action`: "sum"
        -   `range`: рд╕реНрдЯреНрд░рд┐рдВрдЧ (рдЬреИрд╕реЗ "A1:A10")
        -   `target`: рд╕реНрдЯреНрд░рд┐рдВрдЧ (рд╡рд╣ рд╕реЗрд▓ рдЬрд╣рд╛рдБ рдкрд░рд┐рдгрд╛рдо рд▓рд┐рдЦрдирд╛ рд╣реИ, рдЬреИрд╕реЗ "A11")
        рдЙрджрд╛рд╣рд░рдг:
        рдпреВрдЬрд░: "A1 рд╕реЗ A5 рдЬреЛрдбрд╝реЛ рдФрд░ A6 рдореЗрдВ рд▓рд┐рдЦреЛ"
        рдЖрдкрдХрд╛ JSON: `{"actions": [{"action": "sum", "range": "A1:A5", "target": "A6"}]}`

    2.  **average**: рд░реЗрдВрдЬ рдореЗрдВ рд╕рдВрдЦреНрдпрд╛рдУрдВ рдХрд╛ рдФрд╕рдд рдирд┐рдХрд╛рд▓рддрд╛ рд╣реИред
        -   `action`: "average"
        -   `range`: рд╕реНрдЯреНрд░рд┐рдВрдЧ (рдЬреИрд╕реЗ "B1:B10")
        -   `target`: рд╕реНрдЯреНрд░рд┐рдВрдЧ (рд╡рд╣ рд╕реЗрд▓ рдЬрд╣рд╛рдБ рдкрд░рд┐рдгрд╛рдо рд▓рд┐рдЦрдирд╛ рд╣реИ, рдЬреИрд╕реЗ "B11")
        рдЙрджрд╛рд╣рд░рдг:
        рдпреВрдЬрд░: "B1 рд╕реЗ B5 рдХрд╛ рдФрд╕рдд рдирд┐рдХрд╛рд▓реЛ рдФрд░ B6 рдореЗрдВ рд▓рд┐рдЦреЛ"
        рдЖрдкрдХрд╛ JSON: `{"actions": [{"action": "average", "range": "B1:B5", "target": "B6"}]}`

    3.  **write**: рдХрд┐рд╕реА рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕реЗрд▓ рдореЗрдВ рдПрдХ рдорд╛рди рд▓рд┐рдЦрддрд╛ рд╣реИред
        -   `action`: "write"
        -   `target`: рд╕реНрдЯреНрд░рд┐рдВрдЧ (рд╡рд╣ рд╕реЗрд▓ рдЬрд╣рд╛рдБ рд▓рд┐рдЦрдирд╛ рд╣реИ, рдЬреИрд╕реЗ "C1")
        -   `value`: рдХреЛрдИ рднреА рдорд╛рди (рд╕реНрдЯреНрд░рд┐рдВрдЧ, рд╕рдВрдЦреНрдпрд╛) рдЬрд┐рд╕реЗ рд▓рд┐рдЦрдирд╛ рд╣реИред
        рдЙрджрд╛рд╣рд░рдг:
        рдпреВрдЬрд░: "D2 рдореЗрдВ 'рдореЗрд░рд╛ рдбреЗрдЯрд╛' рд▓рд┐рдЦреЛ"
        рдЖрдкрдХрд╛ JSON: `{"actions": [{"action": "write", "target": "D2", "value": "рдореЗрд░рд╛ рдбреЗрдЯрд╛"}]}`
        рдпреВрдЬрд░: "E3 рдореЗрдВ 123 рд▓рд┐рдЦреЛ"
        рдЖрдкрдХрд╛ JSON: `{"actions": [{"action": "write", "target": "E3", "value": 123}]}`

    4.  **highlight**: рдПрдХ рдпрд╛ рдЕрдзрд┐рдХ рд╕реЗрд▓реНрд╕ рдХреЛ рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд░рддрд╛ рд╣реИред
        -   `action`: "highlight"
        -   `range`: рд╕реНрдЯреНрд░рд┐рдВрдЧ (рдЬреИрд╕реЗ "A1" рдпрд╛ "A1:C5")
        -   `color`: рд╕реНрдЯреНрд░рд┐рдВрдЧ (CSS рд░рдВрдЧ рдХрд╛ рдирд╛рдо рдпрд╛ рд╣реЗрдХреНрд╕ рдХреЛрдб, рдЬреИрд╕реЗ "yellow", "#FFFF00", "lightgreen")
        рдЙрджрд╛рд╣рд░рдг:
        рдпреВрдЬрд░: "F1 рд╕реЗ G5 рддрдХ рдкреАрд▓рд╛ рдХрд░реЛ"
        рдЖрдкрдХрд╛ JSON: `{"actions": [{"action": "highlight", "range": "F1:G5", "color": "yellow"}]}`

    5.  **sort**: рдХрд┐рд╕реА рдХреЙрд▓рдо рдХреЛ рд╕реЙрд░реНрдЯ рдХрд░рддрд╛ рд╣реИред
        -   `action`: "sort"
        -   `column`: рд╕реНрдЯреНрд░рд┐рдВрдЧ (рдХреЙрд▓рдо рдХрд╛ рдирд╛рдо, рдЬреИрд╕реЗ "A")
        -   `order`: рд╕реНрдЯреНрд░рд┐рдВрдЧ ("asc" (рдЖрд░реЛрд╣реА) рдпрд╛ "desc" (рдЕрд╡рд░реЛрд╣реА))
        рдЙрджрд╛рд╣рд░рдг:
        рдпреВрдЬрд░: "рдХреЙрд▓рдо A рдХреЛ рдЖрд░реЛрд╣реА рдХреНрд░рдо рдореЗрдВ рд╕реЙрд░реНрдЯ рдХрд░реЛ"
        рдЖрдкрдХрд╛ JSON: `{"actions": [{"action": "sort", "column": "A", "order": "asc"}]}`

    6.  **filter**: рдХрд┐рд╕реА рдХреЙрд▓рдо рдХреЛ рдлрд┐рд▓реНрдЯрд░ рдХрд░рддрд╛ рд╣реИред
        -   `action`: "filter"
        -   `column`: рд╕реНрдЯреНрд░рд┐рдВрдЧ (рдХреЙрд▓рдо рдХрд╛ рдирд╛рдо, рдЬреИрд╕реЗ "A")
        -   `value`: рд╕реНрдЯреНрд░рд┐рдВрдЧ рдпрд╛ рд╕рдВрдЦреНрдпрд╛ (рдЬрд┐рд╕ рдорд╛рди рдкрд░ рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд░рдирд╛ рд╣реИ)
        рдЙрджрд╛рд╣рд░рдг:
        рдпреВрдЬрд░: "рдХреЙрд▓рдо B рдореЗрдВ 'рдкреВрд░реНрдг' рд╡рд╛рд▓реЗ рдХреЛ рдлрд╝рд┐рд▓реНрдЯрд░ рдХрд░реЛ"
        рдЖрдкрдХрд╛ JSON: `{"actions": [{"action": "filter", "column": "B", "value": "рдкреВрд░реНрдг"}]}`


    рдорд╣рддреНрд╡рдкреВрд░реНрдг рдмрд╛рддреЗрдВ:
    -   рд╣рдореЗрд╢рд╛ рд╡реИрдз JSON рдЖрдЙрдЯрдкреБрдЯ рджреЗрдВред рдХреЛрдИ рдЕрддрд┐рд░рд┐рдХреНрдд рдЯреЗрдХреНрд╕реНрдЯ рдпрд╛ рдорд╛рд░реНрдХрд┐рдВрдЧ рдирд╣реАрдВред
    -   рдпрджрд┐ рдХрдорд╛рдВрдб рдореЗрдВ рдХрдИ рдПрдХреНрд╢рдиреНрд╕ рд╣реИрдВ, рддреЛ 'actions' рд▓рд┐рд╕реНрдЯ рдореЗрдВ рд╕рднреА рдПрдХреНрд╢рдиреНрд╕ рдХреЛ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВред
    -   рдпрджрд┐ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХрд╛ рдХрдорд╛рдВрдб рдХрд┐рд╕реА рдПрдХреНрд╕реЗрд▓ рдПрдХреНрд╢рди рд╕реЗ рдореЗрд▓ рдирд╣реАрдВ рдЦрд╛рддрд╛ рд╣реИ, рддреЛ рдХреЗрд╡рд▓ рдПрдХ рд╕рд╛рдорд╛рдиреНрдп, рд╕рд╣рд╛рдпрдХ рдЯреЗрдХреНрд╕реНрдЯ `reply` (рд╕реНрдЯреНрд░рд┐рдВрдЧ) рдкреНрд░рджрд╛рди рдХрд░реЗрдВред рдЗрд╕ рд╕реНрдерд┐рддрд┐ рдореЗрдВ 'actions' рд▓рд┐рд╕реНрдЯ рдЦрд╛рд▓реА рд╣реЛрдЧреА рдпрд╛ рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реЛрдЧреАред
    -   рдЬрд╡рд╛рдм рджреЗрддреЗ рд╕рдордп, рдПрдХреНрд╕реЗрд▓ рдбреЗрдЯрд╛ (рдЬреЛ рдЖрдкрдХреЛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ) рдХреЛ рд╕реАрдзреЗ рджреЛрд╣рд░рд╛рдПрдВ рдирд╣реАрдВред рдЙрд╕рдХрд╛ рдЙрдкрдпреЛрдЧ рдХреЗрд╡рд▓ рд╕рдВрджрд░реНрдн рдХреЗ рд▓рд┐рдП рдХрд░реЗрдВред
    рдЕрдм рдпреВрдЬрд░ рдХрд╛ рдХрдорд╛рдВрдб рдкреНрд░реЛрд╕реЗрд╕ рдХрд░реЗрдВред
    """

    # рдпреВрдЬрд░ рдХрд╛ рдореИрд╕реЗрдЬ рдФрд░ рдПрдХреНрд╕реЗрд▓ рдбреЗрдЯрд╛ рджреЛрдиреЛрдВ Groq рдХреЛ рднреЗрдЬреЗрдВ
    # excelData рдХреЛ JSON рд╕реНрдЯреНрд░рд┐рдВрдЧ рдХреЗ рд░реВрдк рдореЗрдВ рднреЗрдЬреЗрдВ рддрд╛рдХрд┐ AI рдЙрд╕реЗ рдкрдврд╝ рд╕рдХреЗ
    full_user_message = f"User Command: {user_msg}\n\nCurrent Excel Data:\n{json.dumps(excel_data, indent=2)}"

    api_payload = {
        "model": "llama3-8b-8192", # рдЖрдк рдпрд╣рд╛рдВ рдПрдХ рдФрд░ рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рдореЙрдбрд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдпрджрд┐ рдЙрдкрд▓рдмреНрдз рд╣реЛ
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": full_user_message}
        ],
        "temperature": 0.0 # AI рдХреЛ рдЕрдзрд┐рдХ рд╕рдЯреАрдХ рдФрд░ рдХрдо рд░рдЪрдирд╛рддреНрдордХ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП
    }

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    try:
        res = requests.post(
            "https://api.groq.com/openai/v1/chat/completions",
            headers=headers,
            json=api_payload,
            timeout=20 # API рдЯрд╛рдЗрдордЖрдЙрдЯ рдмрдврд╝рд╛рдПрдВ
        )
        res.raise_for_status() # HTTP рддреНрд░реБрдЯрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рдЕрдкрд╡рд╛рдж рдЙрдард╛рдПрдВ
        
        # Groq рд╕реЗ рдорд┐рд▓рд╛ рдкреВрд░рд╛ JSON рд░рд┐рд╕реНрдкрд╛рдВрд╕ рд▓реЗрдВ
        groq_response_content = res.json()["choices"][0]["message"]["content"]
        
        # AI рдХреЗ рдЬрд╡рд╛рдм рдХреЛ JSON рдХреЗ рд░реВрдк рдореЗрдВ рдкрд╛рд░реНрд╕ рдХрд░рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ
        try:
            parsed_response = json.loads(groq_response_content)
            # рдЕрдЧрд░ 'actions' рдХреА рдХреБрдВрдЬреА рд╣реИ, рддреЛ рдЙрд╕ рдСрдмреНрдЬреЗрдХреНрдЯ рдХреЛ рднреЗрдЬреЗрдВ
            if "actions" in parsed_response and isinstance(parsed_response["actions"], list):
                return jsonify(parsed_response)
            else:
                # рдЕрдЧрд░ AI рдиреЗ JSON рджрд┐рдпрд╛ рд▓реЗрдХрд┐рди рдЙрд╕рдореЗрдВ рд╡реИрдз 'actions' рд▓рд┐рд╕реНрдЯ рдирд╣реАрдВ рд╣реИ
                return jsonify({"reply": groq_response_content})
        except json.JSONDecodeError:
            # рдЕрдЧрд░ AI рдиреЗ JSON рдХреЗ рдЕрд▓рд╛рд╡рд╛ рдХреБрдЫ рдФрд░ рджрд┐рдпрд╛
            return jsonify({"reply": groq_response_content})

    except requests.exceptions.Timeout:
        return jsonify({"error": "Groq API timeout", "message": "The AI took too long to respond."}), 504
    except requests.exceptions.RequestException as e:
        # Groq API рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдЕрдиреНрдп HTTP рддреНрд░реБрдЯрд┐рдпрд╛рдВ
        return jsonify({"error": "Groq API request failed", "details": str(e)}), 500
    except Exception as e:
        # рдХреЛрдИ рдЕрдиреНрдп рдЕрдкреНрд░рддреНрдпрд╛рд╢рд┐рдд рддреНрд░реБрдЯрд┐
        return jsonify({"error": "An unexpected error occurred", "details": str(e)}), 500

if __name__ == '__main__':
    # Python рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдХреЛ рдЪрд▓рд╛рдПрдВ
    # рд╣реЛрд╕реНрдЯ рдХреЛ '0.0.0.0' рдкрд░ рд╕реЗрдЯ рдХрд░рдиреЗ рд╕реЗ рдпрд╣ рд▓реЛрдХрд▓ рдиреЗрдЯрд╡рд░реНрдХ рдореЗрдВ рдПрдХреНрд╕реЗрд╕рд┐рдмрд▓ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ
    # рдкреЛрд░реНрдЯ 10000 рдкрд░ рдЪрд▓ рд░рд╣рд╛ рд╣реИ
    app.run(host="0.0.0.0", port=10000, debug=True) # debug=True рд╡рд┐рдХрд╛рд╕ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧреА рд╣реИ
